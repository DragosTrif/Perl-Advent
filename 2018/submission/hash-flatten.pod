
Title: Hash::Flatten
Topic: Handling complex data structures
Author: Tony Edwardson <tony@edwardson.co.uk>

One of the challenging aspects of the Wise Old Elf's tasks is dealing with all
of the various lists of presents requested by all of the children. These arrive
in a variety of formats with different structures and these need to be all
displayed on a webpage so each can be checked and validated.

This causes a problem displaying unstructured data on a web page.

Luckily there is a module which helps here - the Hash::Flatten module takes an
arbitrary data structure and converts it into a simple hash with the key to each
element being Template Toolkit style token refering to the element in the data
structure.

For Example, given a data structure such as this :-
    
    #!perl
    my $data = { 'England' => { 
                    'Bucks' => {
                         'Milton Keynes' => {
                              'Some Road' => { 
                                    4' => {
                                        'Bloggs' => {
                                            'Fred' }}}}}}  => 'Fire Engine',
                 'USA' => {
                    'Maine' =>  {
                        'York' => {
                            'Main Road' => { 
                                'White House' => { 
                                    'Naughty Child' }}}}} => 'Ipad',
                };

This would be awkward to display on a web page but using the flatten method of
Hash::Flatten you can convert it into a simple hash which can then be displayed
as a simple table.

i.e.
    #!perl
    use Hash::Flatten qw/ flatten /;
    my $flathash = flatten( $data );

The variable $flathash will then contain:-

    #!perl
    $flathash = { 'England.Bucks.Milton Keynes.Some Road.4.Bloggs.Fred' => 'Fire Engine',
                  'USA.Maine.York.Main Road.White House.Naughty Child'  => 'Ipad' };

You can now easily present this in a table, store it in a DBM File or process
it.

You can go the other way too by using the B<unflatten> method
